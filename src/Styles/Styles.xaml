<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:LogViewer.Converters"
    xmlns:helpers="clr-namespace:LogViewer.Helpers"
    xmlns:localization="clr-namespace:LogViewer.Localization"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DrawingImages.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibility" />
    <converters:MaxLengthConverter x:Key="LengthConverter" />
    <converters:LoggerDisplayConverter x:Key="LoggerDisplayConverter" />
    <converters:DataConverter x:Key="DataConverter" />
    <converters:ProgressStateConverter x:Key="ProgressStateConverter" />
    <converters:CountToVisibilityConverter x:Key="CountToVisibilityConverter" />
    <sys:Boolean x:Key="True">True</sys:Boolean>
    <sys:Boolean x:Key="False">False</sys:Boolean>

    <Style
        x:Key="TextBoxWithHint"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="TextBox">
        <Style.Resources>
            <VisualBrush
                x:Key="CueBannerBrush"
                AlignmentX="Left"
                AlignmentY="Center"
                Stretch="None">
                <VisualBrush.Visual>
                    <Label
                        Padding="5,0,0,0"
                        Content="{localization:LocBinding Search,
                                                          StringFormat={}{0}...}"
                        Foreground="LightGray" />
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource MaterialDesignRaisedButton}" TargetType="Button">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    </Style>

    <Style
        x:Key="BaseButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Foreground" Value="{Binding FontColor}" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    </Style>

    <Style x:Key="DataGridCellStyle" TargetType="TextBlock">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Height" Value="Auto" />
    </Style>

    <Style x:Key="DataGridCellWrapStyle" TargetType="TextBox">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MaxHeight" Value="350" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    </Style>

    <Style BasedOn="{StaticResource MaterialDesignTextBox}" TargetType="TextBox">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
    </Style>

    <Style x:Key="CircleImageButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="46" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="5,0" />
    </Style>

    <Style
        x:Key="StartPauseNetworkReceiverButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="Button">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=StartIsEnabled}" Value="True">
                <Setter Property="ToolTip" Value="{localization:LocBinding StartReadingLogsFromUDP}" />
                <Setter Property="Command" Value="{Binding Path=StartCommand}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource PlayImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=StartIsEnabled}" Value="False">
                <Setter Property="ToolTip" Value="{localization:LocBinding StopReadingLogsFromUDP}" />
                <Setter Property="Command" Value="{Binding Path=PauseCommand}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource PauseImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="StartPauseFileReceiverButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="Button">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=StartReadFromFileIsEnabled}" Value="True">
                <Setter Property="ToolTip" Value="{localization:LocBinding StartReadingLogsFromFile}" />
                <Setter Property="Command" Value="{Binding Path=StartFileReadingCommand}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource StartReadFromFileImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=StartReadFromFileIsEnabled}" Value="False">
                <Setter Property="ToolTip" Value="{localization:LocBinding StopReadingLogsFromFile}" />
                <Setter Property="Command" Value="{Binding Path=PauseFileReadingCommand}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource PauseReadingFromFileImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="SettingsButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="Button">
        <Setter Property="ToolTip" Value="{localization:LocBinding Settings}" />
        <Setter Property="HorizontalAlignment" Value="Right" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                        <Image Cursor="Hand" Source="{StaticResource SettingImage}" />
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="RootGrid" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ScrollToTop"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{localization:LocBinding ScrollToFirstLogMessage}" />

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource UpImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="AutoScrollToBottom"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource AutoDownImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ScrollToBottom"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{localization:LocBinding ScrollToLastLogMessage}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource DownImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="{DynamicResource BorderLightColor}" />
                            <GradientStop Offset="1.0" Color="{DynamicResource BorderDarkColor}" />
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Rectangle
                            Width="1"
                            HorizontalAlignment="Center"
                            Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0" Color="Black" />
                    <GradientStop Offset="1" Color="White" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseGridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid>
                        <TextBlock
                            x:Name="contentTB"
                            Margin="10,15"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontWeight="DemiBold"
                            Foreground="Gray">
                            <ContentPresenter />
                        </TextBlock>

                        <Thumb
                            x:Name="PART_HeaderGripper"
                            Margin="0,0,-9,0"
                            HorizontalAlignment="Right"
                            Style="{StaticResource GridViewColumnHeaderGripper}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentTB" Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SearchGridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid>
                        <TextBlock
                            x:Name="contentTB"
                            Margin="10,15"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            FontWeight="DemiBold"
                            Foreground="Gray">
                            <ContentPresenter />
                        </TextBlock>

                        <Thumb
                            x:Name="PART_HeaderGripper"
                            Margin="0,0,-9,0"
                            HorizontalAlignment="Right"
                            Style="{StaticResource GridViewColumnHeaderGripper}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentTB" Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IpGridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid Visibility="{Binding Path=IsIpVisible, Converter={StaticResource BooleanToVisibility}}">
                        <TextBlock
                            x:Name="contentTB"
                            Margin="10,15"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontWeight="DemiBold"
                            Foreground="Gray">
                            <ContentPresenter />
                        </TextBlock>

                        <Thumb
                            x:Name="PART_HeaderGripper"
                            Margin="0,0,-9,0"
                            HorizontalAlignment="Right"
                            Style="{StaticResource GridViewColumnHeaderGripper}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentTB" Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="LogLevelHeaderTemplate"
        BasedOn="{StaticResource BaseGridViewColumnHeaderStyle}"
        TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <StackPanel Orientation="Horizontal">
                        <ComboBox
                            Margin="10,0,0,0"
                            ItemsSource="{Binding Path=DataContext.LogLevels, RelativeSource={RelativeSource AncestorType=Window}}"
                            SelectedItem="{Binding Path=DataContext.SelectedMinLogLevel, RelativeSource={RelativeSource AncestorType=Window}}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="ComboBoxItem">
                                    <StackPanel
                                        Height="20"
                                        Margin="0"
                                        Orientation="Horizontal">
                                        <Image
                                            x:Name="ImageLevel"
                                            Height="15"
                                            Margin="0,0,5,0"
                                            Source="{StaticResource TraceImage}" />
                                        <TextBlock
                                            x:Name="contentTB"
                                            Padding="0"
                                            VerticalAlignment="Center"
                                            FontWeight="DemiBold"
                                            Foreground="Gray"
                                            Text="{Binding}" />
                                    </StackPanel>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="Trace">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource TraceImage}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding}" Value="Debug">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource DebugImage}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding}" Value="Info">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource InfoImage}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding}" Value="Warn">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource WarnImage}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding}" Value="Error">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource ErrorImage}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding}" Value="Fatal">
                                            <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource FatalImage}" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="FixedWithHeaderContainerStyle"
        BasedOn="{StaticResource BaseGridViewColumnHeaderStyle}"
        TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="IsEnabled" Value="False" />
    </Style>

    <DataTemplate x:Key="LogLevelImagesDataTemplate">
        <StackPanel Orientation="Horizontal">
            <Image Width="20" Height="20">
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Level}" Value="Warn">
                                <Setter Property="Source" Value="{StaticResource WarnImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Level}" Value="Error">
                                <Setter Property="Source" Value="{StaticResource ErrorImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Level}" Value="Fatal">
                                <Setter Property="Source" Value="{StaticResource FatalImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Level}" Value="Info">
                                <Setter Property="Source" Value="{StaticResource InfoImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Level}" Value="Debug">
                                <Setter Property="Source" Value="{StaticResource DebugImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Level}" Value="Trace">
                                <Setter Property="Source" Value="{StaticResource TraceImage}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <TextBlock
                Margin="10,0,0,0"
                VerticalAlignment="Center"
                Text="{Binding Path=Level}" />
        </StackPanel>

    </DataTemplate>





    <DataTemplate x:Key="LogLevelImageHeaderTemplate">
        <StackPanel Orientation="Horizontal">
            <ComboBox
                Margin="10,0,0,0"
                ItemsSource="{Binding Path=DataContext.LogLevels, RelativeSource={RelativeSource AncestorType=Window}}"
                SelectedItem="{Binding Path=DataContext.SelectedMinLogLevel, RelativeSource={RelativeSource AncestorType=Window}}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel
                            Height="20"
                            Margin="0"
                            Orientation="Horizontal">
                            <Image
                                x:Name="ImageLevel"
                                Height="15"
                                Margin="0,0,5,0"
                                Source="{StaticResource TraceImage}" />
                            <TextBlock
                                x:Name="contentTB"
                                Padding="0"
                                VerticalAlignment="Center"
                                FontWeight="DemiBold"
                                Foreground="Gray"
                                Text="{Binding}" />
                        </StackPanel>

                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding}" Value="Trace">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource TraceImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="Debug">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource DebugImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="Info">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource InfoImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="Warn">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource WarnImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="Error">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource ErrorImage}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="Fatal">
                                <Setter TargetName="ImageLevel" Property="Source" Value="{StaticResource FatalImage}" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
    </DataTemplate>




    <DataTemplate x:Key="ReceiverColorColumnDataTemplate">
        <Grid Background="{Binding Path=Receiver.Color}" ToolTip="{Binding Path=Receiver.Name}">
            <Grid.Style>
                <Style TargetType="{x:Type Grid}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DataContext.ColorReceiverColumnWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="0">
                            <Setter Property="Margin" Value="0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.ColorReceiverColumnWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="15">
                            <Setter Property="Margin" Value="0" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="LogMessageDataTemplate">
        <helpers:SearchableTextControl
            VerticalAlignment="Center"
            IsHighlight="True"
            IsMatchCase="{Binding Path=DataContext.IsMatchCase, RelativeSource={RelativeSource AncestorType=Window}}"
            SearchText="{Binding Path=DataContext.HighlightSearchText, RelativeSource={RelativeSource AncestorType=Window}}"
            Text="{Binding Path=Message, Converter={StaticResource LengthConverter}, ConverterParameter=140}"
            ToolTip="{Binding Path=Message}" />
    </DataTemplate>

    <Style TargetType="{x:Type helpers:SearchableTextControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type helpers:SearchableTextControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <TextBlock
                            x:Name="PART_TEXT"
                            IsEnabled="False"
                            TextWrapping="Wrap" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Border"
                        Background="#F4F4F4"
                        BorderThickness="1"
                        CornerRadius="5">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TreeViewContextMenuItemStyle"
        BasedOn="{StaticResource {x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding HeaderText}" />
        <Setter Property="Command" Value="{Binding ActionCommand}" />
        <Setter Property="CommandParameter" Value="{Binding}" />
        <Setter Property="Icon" Value="{Binding IconImage}" />
    </Style>

    <Style
        x:Key="MessageHeaderTemplate"
        BasedOn="{StaticResource BaseGridViewColumnHeaderStyle}"
        TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <StackPanel Width="1200" Orientation="Horizontal">
                        <TextBlock
                            x:Name="contentTB"
                            Margin="7,0,0,0"
                            VerticalAlignment="Center"
                            FontWeight="DemiBold"
                            Foreground="Gray"
                            Text="{localization:LocBinding Message}" />

                        <Border
                            Width="200"
                            Height="33"
                            Margin="10,0,0,0"
                            HorizontalAlignment="Right"
                            CornerRadius="2">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="BorderBrush" Value="Gray" />
                                    <Setter Property="BorderThickness" Value="1" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsFocused, ElementName=SearchTextBox}" Value="True">
                                            <Setter Property="BorderBrush" Value="{Binding IconColor}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox
                                    x:Name="SearchTextBox"
                                    Margin="5,0,5,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalContentAlignment="Center"
                                    materialDesign:HintAssist.Hint="{localization:LocBinding Search}"
                                    materialDesign:TextFieldAssist.DecorationVisibility="Collapsed"
                                    BorderThickness="0"
                                    Text="{Binding Path=SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                    <TextBox.InputBindings>
                                        <KeyBinding
                                            Key="Return"
                                            Command="{Binding ElementName=LogsListView, Path=DataContext.SearchLogCommand}"
                                            CommandParameter="{StaticResource False}" />
                                    </TextBox.InputBindings>
                                </TextBox>

                                <Button
                                    Grid.Column="1"
                                    Width="20"
                                    Height="20"
                                    Margin="0,0,3,0"
                                    Padding="0"
                                    Command="{Binding ElementName=LogsListView, Path=DataContext.ClearSearchResultCommand}"
                                    Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType=Window}}"
                                    ToolTip="{localization:LocBinding ClearSearchAndSearchResult}"
                                    Visibility="{Binding ElementName=LogsListView, Path=DataContext.ClearSearchResultIsEnabled, Converter={StaticResource BooleanToVisibility}}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid x:Name="RootGrid">
                                                <Image Cursor="Hand" Source="{StaticResource CancelDrawingImage}" />
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                                        <Setter.Value>
                                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                            </Grid>
                        </Border>

                        <Button
                            Width="32"
                            Height="32"
                            Margin="5,0"
                            Padding="2"
                            Command="{Binding ElementName=LogsListView, Path=DataContext.SearchLogCommand}"
                            CommandParameter="{StaticResource False}"
                            Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType=Window}}"
                            ToolTip="{localization:LocBinding FindAllHotKeys}">
                            <Image Source="{StaticResource SearchDrawingImage}" />

                            <Button.ContextMenu>
                                <ContextMenu Style="{StaticResource BaseContextMenu}">
                                    <MenuItem
                                        Margin="0"
                                        Command="{Binding PlacementTarget.Tag.SearchLogCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                        CommandParameter="{StaticResource True}"
                                        Header="{localization:LocBinding InAnotherWindowHotKeys}" />
                                </ContextMenu>
                            </Button.ContextMenu>

                            <Button.Style>
                                <Style BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text.Length, ElementName=SearchTextBox, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button
                            Width="32"
                            Height="32"
                            Margin="0"
                            Padding="2"
                            Command="{Binding ElementName=LogsListView, Path=DataContext.FindPreviousCommand}"
                            IsEnabled="{Binding ElementName=LogsListView, Path=DataContext.IsEnableFindPrevious}"
                            ToolTip="{localization:LocBinding FindPreviousLogMessageToolTip}">
                            <Image Source="{StaticResource SearchPrevious}" />
                        </Button>

                        <Button
                            Width="32"
                            Height="32"
                            Margin="5,0"
                            Padding="2"
                            Command="{Binding ElementName=LogsListView, Path=DataContext.FindNextCommand}"
                            ToolTip="{localization:LocBinding FindNextLogMessageToolTip}">
                            <Image Source="{StaticResource SearchNext}" />
                            <Button.Style>
                                <Style BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type Button}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text.Length, ElementName=SearchTextBox, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button
                            Width="32"
                            Height="32"
                            Margin="0"
                            Padding="2"
                            Command="{Binding ElementName=LogsListView, Path=DataContext.CleanCommand}"
                            IsEnabled="{Binding ElementName=LogsListView, Path=DataContext.CleanIsEnabled}"
                            ToolTip="{localization:LocBinding ClearAllLogsToolTip}">
                            <Image Source="{StaticResource CleanWhiteImage}" />
                        </Button>

                        <ToggleButton
                            Margin="5,0"
                            IsChecked="{Binding ElementName=LogsListView, Path=DataContext.IsMatchCase}"
                            ToolTip="{localization:LocBinding MatchCase}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Border
                                        x:Name="toggleBorder"
                                        Width="33"
                                        Height="33"
                                        BorderBrush="DeepSkyBlue"
                                        BorderThickness="0">
                                        <Image Margin="1" Source="{StaticResource MatchCaseImage}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                            <Setter TargetName="toggleBorder" Property="BorderThickness" Value="2" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>

                        <ToggleButton
                            Margin="0"
                            IsChecked="{Binding ElementName=LogsListView, Path=DataContext.IsMatchWholeWord}"
                            ToolTip="{localization:LocBinding MatchWholeWord}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Border
                                        x:Name="toggleBorder"
                                        Height="33"
                                        BorderBrush="DeepSkyBlue"
                                        BorderThickness="0">
                                        <Image Margin="2" Source="{StaticResource MatchWordDrawingImage}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                            <Setter TargetName="toggleBorder" Property="BorderThickness" Value="2" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>

                        <ToggleButton
                            Margin="5,0"
                            IsChecked="{Binding ElementName=LogsListView, Path=DataContext.IsMatchLogLevel}"
                            ToolTip="{localization:LocBinding MatchLogLevel}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Border
                                        x:Name="toggleBorder"
                                        Height="33"
                                        BorderBrush="DeepSkyBlue"
                                        BorderThickness="0">
                                        <Image Margin="2" Source="{StaticResource MatchLogLevelImage}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                            <Setter TargetName="toggleBorder" Property="BorderThickness" Value="2" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>

                        <ToggleButton
                            Margin="5,0"
                            IsChecked="{Binding ElementName=LogsListView, Path=DataContext.UseRegularExpressions}"
                            ToolTip="{localization:LocBinding UseRegularExpression}">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Border
                                        x:Name="toggleBorder"
                                        Height="33"
                                        BorderBrush="DeepSkyBlue"
                                        BorderThickness="0">
                                        <Image Margin="0" Source="{StaticResource RegularExpressionsImage}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                            <Setter TargetName="toggleBorder" Property="BorderThickness" Value="2" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentTB" Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <ContextMenu x:Key="ItemContextMenu" Style="{StaticResource BaseContextMenu}">
        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.DontShowThisLoggerCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding DontShowThisLogger}">
            <MenuItem.Icon>
                <Image Source="{StaticResource HiddenEyeImage}" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.DontReceiveThisLoggerCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding DontReceiveThisLogger}"
            ToolTip="{localization:LocBinding DontReceiveThisLoggerToolTip}">
            <MenuItem.Icon>
                <Image Source="{StaticResource StopImage}" />
            </MenuItem.Icon>
        </MenuItem>

        <Separator />

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.SetTimeIntervalCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding SetTimeInterval}"
            InputGestureText="Ctrl+Shift+T">
            <MenuItem.Icon>
                <Image Source="{StaticResource GoToTimestampDrawingImage}" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.GoToTimestampCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding GoToTimestamp}"
            InputGestureText="Ctrl+T">
            <MenuItem.Icon>
                <Image Source="{StaticResource GoToTimestampDrawingImage}" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.FindNextWarningCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding GoToNextWarning}"
            InputGestureText="Ctrl+W">
            <MenuItem.Icon>
                <Image Source="{StaticResource FindNextWarning}" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.FindNextErrorCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding GoToNextError}"
            InputGestureText="Ctrl+E">
            <MenuItem.Icon>
                <Image Source="{StaticResource FindNextError}" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem
            Margin="0"
            Command="{Binding Path=DataContext.FindInTreeCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
            Header="{localization:LocBinding FindInTree}">
            <MenuItem.Icon>
                <Image Source="{StaticResource TreeImage}" />
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>



    <Style x:Key="LogRowStyle" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>

            <DataTrigger Binding="{Binding Level}" Value="Warn">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Error">
                <Setter Property="Foreground" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Fatal">
                <Setter Property="Foreground" Value="DarkRed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Info">
                <Setter Property="Foreground" Value="Green" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Debug">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Trace">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>


            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>

        <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />

        <Setter Property="Background" Value="{Binding Path=ToggleMark}" />
        <Setter Property="Margin" Value="0,-1,0,-1" />
    </Style>



    <Style x:Key="LogItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Level}" Value="Warn">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Error">
                <Setter Property="Foreground" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Fatal">
                <Setter Property="Foreground" Value="DarkRed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Info">
                <Setter Property="Foreground" Value="Green" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Debug">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Trace">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>

        <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
        <Setter Property="Background" Value="{Binding Path=ToggleMark}" />
        <Setter Property="Margin" Value="0,-1,0,-1" />
    </Style>


    <Style x:Key="SearchLogItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Level}" Value="Warn">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Error">
                <Setter Property="Foreground" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Fatal">
                <Setter Property="Foreground" Value="DarkRed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Info">
                <Setter Property="Foreground" Value="Green" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Debug">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="Trace">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Border"
                        Width="160"
                        Background="#F4F4F4"
                        BorderThickness="1"
                        CornerRadius="4">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="DimGray" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters:TreeViewLineConverter x:Key="LineConverter" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <!--  Toggle Button  -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <!--<Setter Property="Command" Value="{Binding Path=DataContext.ExpandTreeViewClickCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                        Width="15"
                        Height="13"
                        SnapsToDevicePixels="True">
                        <Rectangle
                            Width="9"
                            Height="9"
                            SnapsToDevicePixels="true"
                            Stroke="#919191">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,2">
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="0.5" Color="Silver" />
                                    <GradientStop Offset="1" Color="LightGray" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle
                            x:Name="ExpandPath"
                            Width="1"
                            Height="5"
                            SnapsToDevicePixels="true"
                            Stroke="Black" />
                        <Rectangle
                            Width="5"
                            Height="1"
                            SnapsToDevicePixels="true"
                            Stroke="Black" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TreeViewItem  -->
    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
        <Setter Property="Visibility" Value="{Binding Path=IsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibility}}" />
        <Setter Property="helpers:TVIExtender.UseExtender" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!--  Connecting Lines  -->
                        <!--  Connecting Lines  -->
                        <Border
                            x:Name="HorLn"
                            Height="1"
                            Margin="9,0,0,0"
                            HorizontalAlignment="Stretch"
                            BorderThickness="0,0,0,1">
                            <Border.BorderBrush>
                                <LinearGradientBrush MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="0,0" EndPoint="2,0">
                                    <GradientStop Offset="0" Color="Transparent" />
                                    <GradientStop Offset="0.499" Color="Transparent" />
                                    <GradientStop Offset="0.5" Color="#999" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <Border
                            x:Name="VerLn"
                            Grid.RowSpan="2"
                            Width="1"
                            Margin="0,0,1,0"
                            VerticalAlignment="Stretch"
                            BorderThickness="0,0,1,0">
                            <Border.BorderBrush>
                                <LinearGradientBrush MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="0,0" EndPoint="0,2">
                                    <GradientStop Offset="0" Color="Transparent" />
                                    <GradientStop Offset="0.499" Color="Transparent" />
                                    <GradientStop Offset="0.5" Color="#999" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <ToggleButton
                            x:Name="Expander"
                            Margin="-1,0,0,0"
                            ClickMode="Press"
                            IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ExpandCollapseToggleStyle}" />
                        <Border
                            Name="Bd"
                            Grid.Column="1"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ContentPresenter
                                x:Name="PART_Header"
                                MinWidth="20"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                ContentSource="Header" />
                        </Border>
                        <ItemsPresenter
                            x:Name="ItemsHost"
                            Grid.Row="1"
                            Grid.Column="1"
                            Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  This trigger changes the connecting lines if the item is the last in the list  -->
                        <Trigger Property="helpers:TVIExtender.IsLastOne" Value="True">
                            <Setter TargetName="VerLn" Property="Height" Value="9" />
                            <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
                        </Trigger>

                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="White" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                            <Setter Property="Background" Value="#ADD8E6" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Settings Styles  -->

    <Style
        x:Key="IPTextBoxStyle"
        BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}"
        TargetType="TextBox">
        <Setter Property="Width" Value="220" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />

    </Style>

    <Style TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="CornerRadius" Value="3" />
    </Style>

    <Style
        x:Key="RemoveButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectedReceiver}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="RemoveIgnoreIpButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="{x:Type Button}">
        <Setter Property="Width" Value="100" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Content" Value="{localization:LocBinding Remove}" />
        <Setter Property="Margin" Value="120,0,0,0" />
        <Setter Property="Command" Value="{Binding Path=RemoveIgnoreIPCommand}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectedIP}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="AddIgnoreIpButtonStyle"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="{x:Type Button}">
        <Setter Property="Width" Value="100" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Content" Value="{localization:LocBinding Add}" />
        <Setter Property="Margin" Value="0,0,120,0" />
        <Setter Property="Command" Value="{Binding Path=AddIgnoreIPCommand}" />

        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=IPAddress}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="False" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="SetDefaultButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{localization:LocBinding SetDefault}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Width" Value="25" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image Cursor="Hand" Source="{StaticResource ReturnBackImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ExportButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{localization:LocBinding ExportLogsToFileToolTip}" />

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image
                                    Height="40"
                                    Cursor="Hand"
                                    Source="{StaticResource ExportDrawingImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ImportButtonStyle"
        BasedOn="{StaticResource CircleImageButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{localization:LocBinding ImportLogsToolTip}" />

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                                <Image
                                    Height="40"
                                    Cursor="Hand"
                                    Source="{StaticResource ImportDrawingImage}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="RootGrid" Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>